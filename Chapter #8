*8-1 월드전자는 노트북을 제조하고 판매하는 회사이다. 
노트북 판매 대수에 상관없이 매년 임대료, 재산세, 보험료, 급여 등 A만원의 고정 비용이 들며, 한 대의 노트북을 생산하는 데에는 재료비와 인건비 등 총 B만원의 가변 비용이 든다고 한다.
예를 들어 A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며, 열 대 생산하는 데는 총 1,700만원이 든다.
노트북 가격이 C만원으로 책정되었다고 한다. 일반적으로 생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다. 
최초로 총 수입이 총 비용보다 많아져 이익이 발생하는 지점을 손익분기점(BREAK-EVEN POINT)이라고 한다.
A, B, C가 주어졌을 때, 손익분기점을 구하는 프로그램을 작성하시오.*/

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

int main(void) {
	int fix, var, sell, point;


	scanf("%d %d %d", &fix, &var, &sell);

	if (var >= sell) {
		printf("%d", -1);
		exit(1);
	}
	else {
		point = fix / (sell - var);
		printf("%d\n", point+1);
	}

	return 0;
}

/*사용자에게 세개의 정수를 입력받고 각각의 변수주소에 값을 저장한다. var(가변비용)이 sell(고정비용)보다 비싸거나 같으면 손익분기점이 존재하지 않으므로 -1을 출력하고 프로그램을 종료시킨다.
var이 sell보다 작을떄는 총 수입(판매비용)이 총 비용(=고정비용+가변비용)과 같은 지점을 point에 저장한다. 
총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 1개 더 팔면 손익분기점을 넘기게 되서 point + 1을 출력한다.*/
![image](https://user-images.githubusercontent.com/80377779/118082445-2c371200-b3f8-11eb-8c53-400b6f0a71bd.png)

/*8-2 아래의 그림과 같이 육각형으로 이루어진 벌집이 있다. 
그림에서 보는 바와 같이 중앙의 방 1부터 시작해서 이웃하는 방에 돌아가면서 1씩 증가하는 번호를 주소로 매길 수 있다. 
숫자 N이 주어졌을 때, 벌집의 중앙 1에서 N번 방까지 최소 개수의 방을 지나서 갈 때 몇 개의 방을 지나가는지(시작과 끝을 포함하여)를 계산하는 프로그램을 작성하시오. 
예를 들면, 13까지는 3개, 58까지는 5개를 지난다. 입력으로 주어진 방까지 최소 개수의 방을 지나서 갈 때 몇 개의 방을 지나는지 출력한다.*/
![image](https://user-images.githubusercontent.com/80377779/118082468-35c07a00-b3f8-11eb-99b9-0504ff035b95.png)

#include<stdio.h>
int main() {
    int a;
    scanf_s("%d", &a);
    int i = 1;
    int sum = 1;

    while (sum < a) { //sum이 a보다 작을동안 반복합니다.
        i += 5; //i에 5를 더하고
        sum = sum + i; //sum을 i의 크기만큼 더합니다. sum의 값이 1을 기준을 1바퀴씩 늘어난다고 생각하였습니다.
    }

    printf("%d", i / 5 + 1); //i를 5로 나누고 1을 더한 값이 원하는 값입니다.

}

//직접 입력한 수까지 도달하는데 몇 개의 방을 지나야 하는지를 출력하는 프로그램입니다.
![image](https://user-images.githubusercontent.com/80377779/118082494-3f49e200-b3f8-11eb-8bef-af9d2f8d7bcb.png)

/*8-3 무한히 큰 배열에 다음과 같이 분수들이 적혀있다. 
이와 같이 나열된 분수들을 1/1 -> 1/2 -> 2/1 -> 3/1 -> 2/2 -> … 과 같은 지그재그 순서로 차례대로 1번, 2번, 3번, 4번, 5번, … 분수라고 하자.
X가 주어졌을 때, X번째 분수를 구하는 프로그램을 작성하시오.*/
![image](https://user-images.githubusercontent.com/80377779/118082557-5ab4ed00-b3f8-11eb-81d9-0913cde7947a.png)

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

int main(void) {
	int num;
	int i, cnt;
	int child, parent;

	scanf("%d", & num);

	if (num == 1) {
		printf("1/1");
	}
	else {
		cnt = 1;
		while (num > cnt) {
			num -= cnt;
			cnt++;
		}

		if (cnt % 2 == 0) {
			parent = cnt; child = 1;

			for (i = 1; i < num; i++)
			{
				parent--;
				child++;
			}
		}
		else
		{
			parent = 1; child = cnt;

			for (i = 1; i < num; i++)
			{
				parent++;
				child--;
			}
		}

		printf("%d/%d", child, parent);
	}
	return 0;
}

/*규칙을 살펴보면 파란화살표는 분자가 작아지고 분모가 커지면서 빨간화살표는 분자가 작아지고 분모가 커진다 
사용자에게 입력받은 num과 cnt를 이용해서 주어진 num이 몇번째 줄인지 확인한다. 
cnt의 값이 나오면 if문으로 짝수줄(파란색)인지 홀수줄(빨간색)인지에 따라 분자와 분모의 증감형태를 다르게 해준다.
그리고 마지막에 분자와 분모가 결정되면 출력해준다.*/
![image](https://user-images.githubusercontent.com/80377779/118082588-69030900-b3f8-11eb-9815-20cab7e58bcf.png)

/*8-4 땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다. 
달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다. 
달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오. 첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력한다.*/

#include<stdio.h>
int main() {
    int A, B, V;
    int day = 0;
    scanf_s("%d %d %d", &A, &B, &V); //A, B, V값을 직접입력합니다.

    while (V > 0) { //V가 양수인동안
        V -= A; //A값을 빼 V를 남은 거리 취급합니다.
        if (V < 0) { //이때 정상에 도달하면 미끄러지지않으므로 
            break; //반복문에서 나갑니다.
        }
        V += B; //밤에 자는동안 거리가 B만큼 늘어납니다.
        day++; //하루가 지났으므로 day에 1을 더합니다.
    }
    printf("%d", day); //총 걸린 날을 출력합니다.
}

//올라가는 거리, 미끄러지는 거리, 나무막대의 길이를 직접 입력해 나무막대의 끝에 다다르는데 며칠이 걸리는지 출력하는 프로그램입니다.
![image](https://user-images.githubusercontent.com/80377779/118082631-791ae880-b3f8-11eb-93f7-765df486437c.png)

/*8-5 ACM 호텔 매니저 지우는 손님이 도착하는 대로 빈 방을 배정하고 있다. 
고객 설문조사에 따르면 손님들은 호텔 정문으로부터 걸어서 가장 짧은 거리에 있는 방을 선호한다고 한다. 여러분은 지우를 도와 줄 프로그램을 작성하고자 한다. 
즉 설문조사 결과 대로 호텔 정문으로부터 걷는 거리가 가장 짧도록 방을 배정하는 프로그램을 작성하고자 한다.
문제를 단순화하기 위해서 호텔은 직사각형 모양이라고 가정하자. 
각 층에 W 개의 방이 있는 H 층 건물이라고 가정하자 (1 ≤ H, W ≤ 99). 그리고 엘리베이터는 가장 왼쪽에 있다고 가정하자(그림 1 참고). 
이런 형태의 호텔을 H × W 형태 호텔이라고 부른다. 호텔 정문은 일층 엘리베이터 바로 앞에 있는데, 정문에서 엘리베이터까지의 거리는 무시한다. 
또 모든 인접한 두 방 사이의 거리는 같은 거리(거리 1)라고 가정하고 호텔의 정면 쪽에만 방이 있다고 가정한다.
그림 1. H = 6 이고 W = 12 인 H × W 호텔을 간략하게 나타낸 그림
방 번호는 YXX 나 YYXX 형태인데 여기서 Y 나 YY 는 층 수를 나타내고 XX 는 엘리베이터에서부터 세었을 때의 번호를 나타낸다. 
즉, 그림 1 에서 빗금으로 표시한 방은 305 호가 된다.
손님은 엘리베이터를 타고 이동하는 거리는 신경 쓰지 않는다. 다만 걷는 거리가 같을 때에는 아래층의 방을 더 선호한다. 
예를 들면 102 호 방보다는 301 호 방을 더 선호하는데, 102 호는 거리 2 만큼 걸어야 하지만 301 호는 거리 1 만큼만 걸으면 되기 때문이다. 
같은 이유로 102 호보다 2101 호를 더 선호한다.
여러분이 작성할 프로그램은 초기에 모든 방이 비어있다고 가정하에 이 정책에 따라 N 번째로 도착한 손님에게 배정될 방 번호를 계산하는 프로그램이다. 
첫 번째 손님은 101 호, 두 번째 손님은 201 호 등과 같이 배정한다. 그림 1 의 경우를 예로 들면, H = 6이므로 10 번째 손님은 402 호에 배정해야 한다.
프로그램은 표준 입력에서 입력 데이터를 받는다. 프로그램의 입력은 T 개의 테스트 데이터로 이루어져 있는데 T 는 입력의 맨 첫 줄에 주어진다. 
각 테스트 데이터는 한 행으로서 H, W, N, 세 정수를 포함하고 있으며 각각 호텔의 층 수, 각 층의 방 수, 몇 번째 손님인지를 나타낸다(1 ≤ H, W ≤ 99, 1 ≤ N ≤ H × W).*/
![image](https://user-images.githubusercontent.com/80377779/118082671-8df77c00-b3f8-11eb-8e3b-b28501b640b5.png)

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

int main(void) {
	int size;
	int H, W, N;

	scanf("%d", & size);
	for (int i = 0; i < size; i++) {
		scanf("%d %d %d", &H, &W, &N);
		if (N % H == 0) printf("%d%02d\n", H, N / H);
		else printf("%d%02d\n", N % H, N / H + 1);
	}

	return 0;
}

/*사용자한테 반복횟수를 입력받은 값을 size변수 주소에 저장하고 for문으로 size만큼 반복실행한다.
scanf를 통하여 3개의 정수를 입력받고 각각 H,W,N의 주소에 값을 저장한다.
내가 푼 방법은 0을 기준으로 앞의 자리와 뒤의자리를 보고 출력하는 방법을 선택했다.
N층만큼에 1명의 사람이 들어가면 나머지의 사람은 다음호수의 최고층이 결정되기 때문에 나머지 연산자를 썻으며 
마지막 사람의 호수는 N/H+1으로 수학적으로 생각했다. 만약 6 12 10이 있다면 각 층의 1호에 6명이 들어가고 
다음 4명은 2호에 1층부터 순서대로 들어가게 된다. 그럼 나머지4명 ( = 나머지 연산자 N%H)으로 층은 결정됐고 호수는 1호에 H명만큼 들어가고
2호에 나머지 N-H가 들어가게 된다. 따라서 몫을 이용하면 호수를 결정 할 수 있게 되어 N/H+1으로 호수를 결정해준다. 
if /else를 사용한 이유는 6 12 12처럼 제일 꼭대기 층에 가는 사람은 나머지 연산자를 이용하면 0이 나오기 때문에 특별한 케이스로써 층은 H를 출력하고 호수는 N/H를 출력한다.*/
![image](https://user-images.githubusercontent.com/80377779/118082707-9cde2e80-b3f8-11eb-985c-2ea03e593f59.png)

/*8-7 상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 
설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.
상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 
예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.
상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.*/

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

int main(void) {
	int num, sum=0;
	int sum_3 = 0;

	scanf("%d", &num);

	while (1) {
		if (num % 5 == 0) {
			sum = sum_3 + (num / 5);
			printf("5kg : %d개 , 3kg : %d개, 총 %d개", sum_3, sum-sum_3, sum);
			break;
		}

		num = num - 3;
		sum_3++;

		if (num < 0) {
			printf("-1");
			break;
		}
	}

	return 0;
}

/*문제에서는 총 개수만 출력하면 되지만 보기 쉽게 5kg,3kg 각각의 개수와 총 개수를 한번에 출력하기 위해서 sum_3 이라는 변수를 하나 더 만들었다.
사용자에게 정수를 입력받고 num의 주소에 값을 저장한다. while(1)을 통해서 무한반복시키면서 if문으로 주어진 수가 5로 나누어떨이지는지 확인한다.
만약 바로 나누어 떨어지면 num의 몫이 총 개수가 될 것이다. num이 바로 5로 나누어떨어지지 않으면 num을 3만큼 감소시키고 sum_3을 1 증가시킨다.
이러한 로직으로 반복하는데 num이 0보다 작아질때까지 break가 되지 않는다는 것은 5와3만으로는 나누어떨어지지 않는다는 말이 되므로 -1을 출력한다.*/
![image](https://user-images.githubusercontent.com/80377779/118082767-b7b0a300-b3f8-11eb-9e8b-cc324a47b2e5.png)

//8-8 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오. 첫째 줄에 A와 B가 주어진다. (0 < A,B < 1010000) 첫째 줄에 A+B를 출력한다.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h> //strlen을 쓰기위해 넣었습니다.
#define LEN 10001

int sum[LEN]; //계산 결과값이 들어갈 배열입니다.
char arr[LEN], sarr[LEN]; //입력할 숫자들이 들어갈 배열입니다.

int main() {

	int length, slength, a, b;
	scanf("%s %s", arr, sarr);
	length = strlen(arr); //배열의 길이를 length에 집어넣습니다.
	slength = strlen(sarr);

	a = length - 1;
	b = slength - 1;

	if (length > slength) { //length가 slength보다 크면
		for (int i = length - 1; i >= 0; i--) { //arr의 끝부터 0까지
			if (b < 0) sum[i] += arr[i] - '0'; //b가 음수면 sum에 arr의 원소값을 넣습니다.
			else sum[i] = arr[i] - '0' + sarr[b--] - '0'; //그게아니라면 arr의 원소값에 sarr의 b--에 위치한 값을 더해 sum에 넣습니다.
		}

		for (int i = length - 1; i > 0; i--) {
			if (sum[i] >= 10) { //sum의 원소값이 10이상이면
				sum[i] %= 10; //1의 자리로 바꿔줍니다.
				sum[i - 1] += 1; //i-1에 위치한 값에 올림을 해줍니다.
			}
		}

		for (int i = 0; i < length; i++) { 
			printf("%d", sum[i]); //sum을 출력합니다.
		}
		printf("\n");
		return 0;
	}

	else { //length가 slength보다 작거나 같으면
		for (int i = slength - 1; i >= 0; i--) {
			if (a < 0) sum[i] = sarr[i] - '0'; //a가 음수면 반대로 sarr의 원소값을 sum에 넣습니다.
			else sum[i] = sarr[i] - '0' + arr[a--] - '0'; //그게아니라면 sarr의 원소값에 arr의 a--에 위치한 값을 더해 sum에 넣습니다.
		}

		for (int i = slength - 1; i > 0; i--) {
			if (sum[i] >= 10) {
				sum[i] %= 10;
				sum[i - 1] += 1;
			}
		}

		for (int i = 0; i < slength; i++) {
			printf("%d", sum[i]);
		}
		printf("\n");
		return 0;
	}
	return 0;
}

//큰 수의 합의 결과를 출력하는 프로그램입니다. int형의 범위는 –2,147,483,648 ~2,147,483,647이므로 배열을 이용해 구합니다.
![image](https://user-images.githubusercontent.com/80377779/118082794-c5febf00-b3f8-11eb-9111-f95e6b59a31a.png)

/*8-9 우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 
그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간ㅌ을 기다리고 있다.
그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 
그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다. 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 
기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다. 
예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며, 
그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다. ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. )
김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 x지점에서 y지점을 향해 최소한의 작동 횟수로 이동하려 한다. 
하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.
김우현을 위해 x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.*/
![image](https://user-images.githubusercontent.com/80377779/118082838-db73e900-b3f8-11eb-8e02-3c114f8caf06.png)

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

int main(void) {
	int size, num1, num2;
	int road, cnt;

	scanf("%d", &size);

	for (int i = 0; i < size; i++) {
		cnt = 0;
		road = 1;
		scanf("%d %d", &num1, &num2);
		while(num1 < num2 - 1) {
			num1 += road;
			cnt++;
			road++;
		}
		printf("%d\n", cnt + 1);

	}
	return 0;
}

/*사용자에게 입력받은 정수를 size변수 주소에 값을 저장하고 size만큼 for문을 반복실행한다.
for문 내부로 들어가면 몇 번 이동했는지를 보여줄 cnt를 0으로 초기화하고 이동할 거리를 road라고 했고 1로 초기화 한다.
이동 장치 작동 횟수의 최솟값을 구하는 것이기 때문에 road-1, road는 생각하지 않는다.
사용자에게 정수 2개를 입력받고 num1과 num2의 주소에 값을 저장하고 while문으로 num이 num2 -1보다 작을 때 까지 반복실행한다. 
num2-1까지 하는 이유는 마지막 1칸은 무조건 1광년만 움직일 수 있기 때문에 마지막 출력할 때 cnt에 1을 더하면 된다. 
while문은 num1에다가 road를 더해주고 cnt와 road를 각각 1씩 더해준다. 이렇게 되면 반복 실행 할 때마다 1광년, 2광년, 3광년 순서대로 멀리 공간이동을 할 수있다. 
num1이 num2-1 보다 크면 while문 빠져나오고 cnt + 1을 출력한다.*/
![image](https://user-images.githubusercontent.com/80377779/118082867-e75fab00-b3f8-11eb-9c17-961ad25b17ef.png)
