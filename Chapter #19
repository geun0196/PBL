/*19-1 정수를 저장하는 큐를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
명령은 총 여섯 가지이다.
push X: 정수 X를 큐에 넣는 연산이다.
pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 큐에 들어있는 정수의 개수를 출력한다.
empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 2,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다.
주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int start, end = 0;

typedef struct queue {
	int data;
}Queue; //구조체 Queue입니다.

int main() {
	Queue* queue;
	int inputdata, num;
	char input[5];
	scanf("%d", &num); //입력할 문장의 수의 개수입니다.
	queue = (Queue*)malloc(num * sizeof(Queue)); //malloc으로 queue의 크기를 배정합니다.
	if (queue != NULL) { 
		for (int i = 0; i < num; i++) { 
			scanf("%s", &input); //명령어를 직접입력합니다.
			if (!strcmp(input, "push")) { //strcmp함수를 통해 문자열을 비교합니다.
				scanf("%d", &inputdata); //inputdata를 입력해
				queue[end].data = inputdata; //queue의 end의 data에 넣습니다.
				end += 1; //end를 늘려줍니다.
			}
			else if (!strcmp(input, "pop")) { //pop이 입력되면
				if (end != 0) { //queue가 비어있지 않다면
					printf("%d\n", queue[start].data); //queue의 가장 앞의 값인 start의 data를 출력합니다.
					start += 1; //start를 늘려줍니다.
					if (start == end) //그리고 start와 end가 만나게된다면
						start = end = 0; //queue가 비게 된것이므로 start와 end를 0으로 초기화 해줍니다.
				}
				else //queue가 비어있으면
					printf("%d\n", -1); //-1을 출력합니다.
			}
			else if (!strcmp(input, "size")) //size가 입력되면
				printf("%d\n", end-start); //end에서 start를 뺀값을 출력합니다.
			else if (!strcmp(input, "empty")) { //empty가 입력되면
				if (end == 0) //비어있으면
					printf("%d\n", 1); //참이므로 1을 출력합니다.
				else
					printf("%d\n", 0); //거짓이면 0을 출력합니다.
			}
			else if (!strcmp(input, "front")) { //front가 입력되면
				if (end == 0) //queue가 비어있으면
					printf("%d\n", -1); //-1을 출력합니다.
				else //그게아니라면
					printf("%d\n", queue[start].data); //queue의 start에 위치한 data값을 출력합니다.
			}
			else if (!strcmp(input, "back")) { //back이 입력되면
				if (end == 0) //queue가 비어있으면
					printf("%d\n", -1);//-1을 출력합니다.
				else //그게아니라면
					printf("%d\n", queue[end - 1].data); //queue의 end 앞에 위치한 data값을 출력합니다.
			}
		}
	}
	free(queue); //queue의 사용이 끝났으므로 데이터를 반환해줍니다.
	return 0;
}

//queue를 사용해 주어진 명령어를 수행하는 프로그램입니다.
![image](https://user-images.githubusercontent.com/80377779/119974430-99999400-bfef-11eb-9491-87c807ecff25.png)

/*19-2 N장의 카드가 있다. 각각의 카드는 차례로 1부터 N까지의 번호가 붙어 있으며, 1번 카드가 제일 위에, N번 카드가 제일 아래인 상태로 순서대로 카드가 놓여 있다.
이제 다음과 같은 동작을 카드가 한 장 남을 때까지 반복하게 된다. 우선, 제일 위에 있는 카드를 바닥에 버린다. 그 다음, 제일 위에 있는 카드를 제일 아래에 있는 카드 밑으로 옮긴다.
예를 들어 N=4인 경우를 생각해 보자. 카드는 제일 위에서부터 1234 의 순서로 놓여있다. 1을 버리면 234가 남는다. 여기서 2를 제일 아래로 옮기면 342가 된다. 
3을 버리면 42가 되고, 4를 밑으로 옮기면 24가 된다. 마지막으로 2를 버리고 나면, 남는 카드는 4가 된다.
N이 주어졌을 때, 제일 마지막에 남게 되는 카드를 구하는 프로그램을 작성하시오.*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int queue[2000001];
int front = 0;
int rear = -1;

void clean(char arr[]) {
	int i;
	for (i = 0; i < 6; i++)
		arr[i] = '\0';
}
void push(int x) {
	queue[++rear] = x;
}
void pop(void) {
	if (rear - front + 1 == 0)
		printf("%d\n", -1);
	else
		printf("%d\n", queue[front++]);
}
void size(void) {
	printf("%d\n", rear - front + 1);
}
void empty(void) {
	if (rear - front + 1 != 0)
		printf("%d\n", 0);
	else
		printf("%d\n", 1);
}

int main(void) {
    int* arr;
    arr = (int*)malloc(sizeof(int) * 1000000);
    int i, front = 1, back, cnt = 0;
    scanf("%d", &back);

    for (i = 1; i <= back; i++) {
        arr[i] = i;
    }
    if (back == 1) {
        printf("1");
    }
    while (front != back) {

        arr[front] = 0;
        front++;
        if (front == back) {
            printf("%d", arr[front]);
            break;
        }
        back++;
        arr[back] = arr[front];
        arr[front] = 0;
        front++;
    }
    free(arr);
}

/*큐에 1개의 카드가 남을 때까지 반복을 해야한다. 그러기 위해 우선 사용자에게 back을 입력받고 1부터 back까지 큐 배열에 저장을 한다음 1장이면 바로 1을 출력한다.
while문에서는 pop한번 하는데 pop,push하는 반복을 하고 중간에 처음 pop 했을 때 1장의 카드만 남게 되면 카드를 출력하는 프로그램이다.*/
![image](https://user-images.githubusercontent.com/80377779/119974480-aa4a0a00-bfef-11eb-9acd-d3850be2c9cc.png)

/*19-3 요세푸스 문제는 다음과 같다. 1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 
한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 
원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다. 
N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오. 첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 1,000)*/

#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>

int queue[1001];
int front = 0;
int rear = 0;
int N, M;

void push(int data) { //push함수입니다.
	queue[rear++] = data; //queue의 rear에 입력한 수를 집어넣고 rear를 증가시킵니다.
}

int pop() { //pop함수입니다.
	return queue[front++]; //queue의 가장 앞의 값을 출력하고 front를 증가시킵니다.
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= N; i++) queue[rear++] = i; //입력한 수의 사람을 각각 queue의 끝자리에 순서대로 배치합니다.
	printf("<");
	for (int i = 0; i < N; i++) { //N번만큼 반복합니다.
		for (int j = 0; j < M - 1; j++) push(pop()); //M번째의 앞의 수들을 뒤로 배치합니다.
		printf("%d, ", pop()); //M번째의 수를 pop하고 출력합니다.
	}
	printf(">");
}

//queue를 이용해 요세푸스 문제를 해결하는 프로그램입니다.
![image](https://user-images.githubusercontent.com/80377779/119974517-b8982600-bfef-11eb-957d-6c2d3ed730f0.png)

/*19-4 여러분도 알다시피 여러분의 프린터 기기는 여러분이 인쇄하고자 하는 문서를 인쇄 명령을 받은 ‘순서대로’, 즉 먼저 요청된 것을 먼저 인쇄한다. 
여러 개의 문서가 쌓인다면 Queue 자료구조에 쌓여서 FIFO - First In First Out - 에 따라 인쇄가 되게 된다. 하지만 상근이는 새로운 프린터기 내부 소프트웨어를 개발하였는데, 
이 프린터기는 다음과 같은 조건에 따라 인쇄를 하게 된다.
현재 Queue의 가장 앞에 있는 문서의 ‘중요도’를 확인한다.
나머지 문서들 중 현재 문서보다 중요도가 높은 문서가 하나라도 있다면, 이 문서를 인쇄하지 않고 Queue의 가장 뒤에 재배치 한다. 그렇지 않다면 바로 인쇄를 한다.
예를 들어 Queue에 4개의 문서(A B C D)가 있고, 중요도가 2 1 4 3 라면 C를 인쇄하고, 다음으로 D를 인쇄하고 A, B를 인쇄하게 된다.
여러분이 할 일은, 현재 Queue에 있는 문서의 수와 중요도가 주어졌을 때, 어떤 한 문서가 몇 번째로 인쇄되는지 알아내는 것이다.
예를 들어 위의 예에서 C문서는 1번째로, A문서는 3번째로 인쇄되게 된다.*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int queue[100];
int front = 0;
int rear = -1;

void clean(char arr[]) {
	int i;
	for (i = 0; i < 6; i++)
		arr[i] = '\0';
}
void push(int x) {
	queue[++rear] = x;
}
void pop(void) {
	if (rear - front + 1 == 0)
		printf("%d\n", -1);
	else
		printf("%d\n", queue[front++]);
}
void size(void) {
	printf("%d\n", rear - front + 1);
}
void empty(void) {
	if (rear - front + 1 != 0)
		printf("%d\n", 0);
	else
		printf("%d\n", 1);
}

int main(void) {
	int size;
	int n, m;
	scanf("%d", &size);
	for (int i = 0; i < size; i++) {
		scanf("%d %d", &n, &m);
		int cnt = 1;
		int max = 0;
		// 사용자에게 우선순위 입력받음
		for (int j = 0; j < n; j++) { 
			scanf("%d", &queue[j]);
		}
		while (1) {  //최댓값 찾기

			for (int k = 0; k < n; k++) {
				if (queue[k] > max) {
					max = queue[k];
				}
			}
			
			while (queue[front] != max) {
				front = (front + 1) % n;  //원형큐
			}
			if (front == m) {
				break;
			}
			queue[front] = 0;
			front = (front + 1) % n;
			max = 0;
			cnt++;
		}
		printf("%d\n", cnt);
	}
}

/*size를 입력받고 for문으로 size만큼 반복한다. 사용자에게 n과 m을 입력받고 큐에 0부터 n까지 사용자에게 입력받는다. 
그 후 while문으로 최댓값을 찾는데 최대값이 front를 만날 때까지 이동시킨 다음에 front가 m과 같게 되면 출력을 하고 같지 않으면 front를 1칸 뒤로 이동시킨다. 
그리고 현재 front 값과 최댓값을 0으로 초기화해주면서 반복하는 프로그램이다.*/
![image](https://user-images.githubusercontent.com/80377779/119974573-cc438c80-bfef-11eb-9db1-cad8ebbee09c.png)
